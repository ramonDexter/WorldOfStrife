// Copyright (c) 2017 Benjamin Moir. All rights reserved.
// This work is licensed under the terms of the MIT license.  
// To obtain a copy, visit <https://opensource.org/licenses/MIT>.

class BinaryReader
{
    private Stream m_BaseStream;

    Stream GetBaseStream()
    {
        return m_BaseStream;
    }

    private int Read()
    {
        return m_BaseStream.Read();
    }

    private int Peek()
    {
        return m_BaseStream.Peek();
    }

    int ReadByte()
    {
        return Read();
    }

    int ReadUInt16()
    {
        return
            (Read() << 0) |
            (Read() << 8);
    }
	
	int ReadInt16()
	{
		int i = ReadUInt16();
		if (i > 32767) return i|0xFFFF0000;
		return i;
	}

    int ReadInt32()
    {
        return
            (Read() <<  0) |
            (Read() <<  8) |
            (Read() << 16) |
            (Read() << 24);
    }

    int ReadInt64()
    {
        return
            (Read() <<  0) |
            (Read() <<  8) |
            (Read() << 16) |
            (Read() << 24) |
            (Read() << 32) |
            (Read() << 40) |
            (Read() << 48) |
            (Read() << 56);
    }

    ArrayI8 ReadBytes(int count)
    {
        let arr = new("ArrayI8");
        for(int i = 0; i < count; i++)
            arr.Push(Read());
        return arr;
    }

    string ReadString(int length = -1)
    {
        string result = "";
        
        if(length > 0)
            for(int i = 0; i < length; i++)
        {
            result.AppendFormat("%c", Read());
        }
        else
            while(true)
        {
            int c = Read();
            if(c == 0) break;
            result.AppendFormat("%c", c);
        }

        return result;
    }

    float ReadFloat32()
    {
        return 0.0;
    }

    double ReadFloat64()
    {
        return 0.0;
    }

    static BinaryReader Create(Stream input)
    {
        let br = new("BinaryReader");
        br.m_BaseStream = input;
        return br;
    }
}
