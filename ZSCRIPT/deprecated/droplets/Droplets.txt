class Droplets : actor abstract
{
	static const String liquidpics[] = { "NUKAGE1", "NUKAGE2", "NUKAGE3", "BLOOD1", "BLOOD2", "BLOOD3", "SLIME01",
		"SLIME02", "SLIME03", "SLIME04", "SLIME05", "SLIME06", "SLIME07", "SLIME08", "LAVA1", "LAVA2", "LAVA3", "LAVA4",
		"FWATER1", "FWATER2", "FWATER3", "FWATER4", "F_HWATR1", "F_HWATR2", "F_HWATR3", "F_PWATR1", "F_PWATR2",
		"F_PWATR3", "P_VWATR1", "F_VWATR2", "F_VWATR3", "F_WATR01","F_WATR02", "F_WATR03", "FLATHUH1",
		"FLATHUH2", "FLATHUH3", "FLATHUH4", "FLTFLWW1", "FLTFLWW2", "FLTFLWW3", "FLTWAWA1", "FLTWAWA2", "FLTWAWA3",
		"FLTLAVA1", "FLTLAVA2", "FLTLAVA3", "FLTLAVA4", "FLTSLUD1", "FLTSLUD2", "FLTSLUD3", "X_001", "X_002", "X_003",
		"X_004", "X_005", "X_006", "X_007", "X_008", "X_009", "X_010", "X_011" };
	
	bool bSnapToFloor;
	
	double last_vel, rndzoffset;
	
	property SnapToFloor : bSnapToFloor;

	bool SkyCheck()
	{
		return (TexMan.GetName(floorpic) == "F_SKY1");
	}
	
	bool LiquidCheck()
	{
		string floorname = TexMan.GetName(floorpic);
		for (int i = 0; i < liquidpics.size(); i++)
		{
			if (floorname == liquidpics[i])
				return true;
		}
		return false;
	}
	
	action void A_FloorSplat(double size)
	{
		let splat = FloorSplat(Actor.Spawn('FloorSplat',(invoker.pos.xy, invoker.floorz)));
		splat.final_scale = size;
		splat.translation = translation;
	}
	
	action void A_BloodFog(class<Actor> type, double size = 0.0)
	{
		if (size > 0 && invoker.scale.x < 0.1 || CountProximity('BloodFog',32.0) > 16) return;
		let fog = BloodFog(Actor.Spawn(type,(invoker.pos.xy, invoker.floorz)));
		if (size > 0)
			fog.final_scale = size;
		else
			fog.final_scale = invoker.scale.x * 50;
		fog.translation = invoker.translation;
	}
	
	override void BeginPlay()
	{
		//I'm gonna just steal this wholesale from NashMuhandes
		rndzoffset = frandom(0.0001, 0.1000);
		
		Super.BeginPlay();
	}
	
	override void Tick()
	{
		last_vel = vel.length();
		Super.Tick();
		if (bSnapToFloor && pos.z < floorz + 0.2)
			SetOrigin((pos.x, pos.y, floorz + rndzoffset), false);
	}
	
	Default
	{
		+DONTSPLASH
		Droplets.SnapToFloor true;
	}
}

class BloodDroplet : Droplets
{
	double final_scale;
	
	action state A_WallSplat()
	{
		FLineTraceData linedat;
		invoker.A_FaceMovementDirection();
		invoker.LineTrace
		(
			invoker.angle,
			invoker.vel.length() + invoker.radius,
			invoker.pitch,
			TRF_THRUACTORS|TRF_NOSKY,
			data: linedat
		);
		if (linedat.HitType == TRACE_HitWall)
		{
			let splat = WallBloodSpot(Actor.Spawn('WallBloodSpot',linedat.HitLocation));
			Vector3 offset = (invoker.pos - splat.pos).Unit();
			offset *= frandom(0.99,1.01);
			splat.SetOrigin(splat.pos + offset, false);
			splat.user_scale = invoker.final_scale * 0.166667 + 0.083333;
			splat.translation = invoker.translation;
			splat.angle = VectorAngle(
				linedat.HitLine.v2.p.x - linedat.HitLine.v1.p.x,
				linedat.HitLine.v2.p.y - linedat.HitLine.v1.p.y)
				- 90.0;
			invoker.A_StartSound("blood/drip",volume: invoker.final_scale * invoker.last_vel * 0.0625);
			return resolveState("NULL");
		}
		invoker.vel.xy *= 0.94;
		return resolveState(null);
	}
	
	action void A_SplitDroplet(class<Actor> type, double factor)
	{
		if (factor > 0.1)
		{
			int subdroplets = int(factor / 0.1);
			for (int i = 0; i < subdroplets; i++)
			{
				let droplet = BloodDroplet(Actor.Spawn(type,invoker.pos + (0,0,4)));
				droplet.final_scale = factor;
				droplet.scale = (factor, factor) * 0.3333;
				double velangle = VectorAngle(invoker.vel.x, invoker.vel.y);
				droplet.vel = (AngleToVector(frandom(velangle-90,velangle+90),frandom(2,10)*factor), frandom(2,10)*factor);
				droplet.translation = invoker.translation;
			}
		}
	}
	
	action void A_CeilingSplat()
	{
		let splat = CeilDripper(Actor.Spawn('CeilDripper',(invoker.pos.x, invoker.pos.y, invoker.ceilingz)));
		splat.final_scale = invoker.final_scale;
		splat.translation = invoker.translation;
	}
	
	Default
	{
		Radius 2;
		Height 4;
		+MISSILE
		+NOTONAUTOMAP
		+FORCEXYBILLBOARD
		+NOTELEPORT
		+BLOODLESSIMPACT
		+FLOORCLIP
		+WINDTHRUST
		+NOBLOCKMAP
		+THRUACTORS
		+MOVEWITHSECTOR
		//+SLIDESONWALLS
		Friction 0.01;
		RenderStyle "Translucent";
		//DistanceCheck GetCVar(cl_drop1_dist);
		MaxStepHeight 1;
		Speed 3;
	}
	States
	{
	Spawn:
		DROP A 1 NoDelay { alpha = blood_alpha; gravity = blood_grav; }
		TNT1 A 0 A_ScaleVelocity(blood_rand);
		TNT1 A 0 A_JumpIf(waterlevel > 0, "Underwater");
		goto Fall;
	Fall:
		TNT1 A 0 A_JumpIf(pos.z <= floorz, "Death");
		TNT1 A 0 A_JumpIf(waterlevel > 0, "Underwater");
		DROP A 1 A_WallSplat();
		Loop;
	Death:
		TNT1 A 0 { bWINDTHRUST = false; bMISSILE = false; }
		TNT1 A 0 A_JumpIf(ceilingz - pos.z < 8.0, "Ceil");
		TNT1 A 0 {if (blood_splash) A_SplitDroplet('BloodDroplet', scale.x);}
		TNT1 A 0 A_StartSound("blood/drip",volume: final_scale * last_vel * 0.0625);
		TNT1 A 0 A_JumpIf(pos.z > floorz + 8.0, "Null");
		TNT1 A 0 A_JumpIf(LiquidCheck(),"Fog");
		TNT1 A 0 A_SetAngle(frandom(0.0,360.0));
		PLUD "#" 1
		{
			frame = random(0,2);
			A_SetScale(final_scale * blood_size,0.1);
		}
		goto Splat;
	Splat:
		"####" "#" 1 A_SetScale(final_scale * 3.13 * blood_size,0.1);
		"####" "#" 1 A_SetScale(final_scale * 4.2 * blood_size,0.1);
		"####" "#" 1 A_SetScale(final_scale * 4.73 * blood_size,0.1);
		"####" "#" 1 A_SetScale(final_scale * 5.00 * blood_size,0.1);
		"####" "#" 0 A_QueueCorpse;
		"####" "#" -1;
	Underwater:
		TNT1 A 0 A_SpawnItemEx("BloodMist",0,0,0,vel.x/3,vel.y/3,vel.z/3,0,SXF_TRANSFERTRANSLATION);
		Stop;
	Ceil:
		TNT1 A 0 A_JumpIf(!SkyCheck(),1);
		Stop;
		TNT1 A 0 A_CeilingSplat;
		Stop;
	Fog:
		TNT1 A 0 A_BloodFog('BloodFog');
		Stop;
	}
}

class DecoDroplet : BloodDroplet
{
	States
	{
	Death:
		TNT1 A 0 { bWINDTHRUST = false; bMISSILE = false; }
		TNT1 A 0 {if (blood_splash) A_SplitDroplet('DecoDroplet', scale.x);}
		TNT1 A 0 A_StartSound("blood/drip",volume: final_scale * last_vel * 0.0625);
		TNT1 A 0 A_JumpIf(pos.z > floorz + 8.0, "Wall");
		TNT1 A 0 A_JumpIf(LiquidCheck(),"Fog");
		TNT1 A 0 A_SetAngle(frandom(0.0,360.0));
		PLUD "#" 1
		{
			frame = random(0,2);
			A_SetScale(final_scale * blood_size,0.1);
		}
	Splat:
		"####" "#" 1 A_SetScale(final_scale * 3.13 * blood_size,0.1);
		"####" "#" 1 A_SetScale(final_scale * 4.2 * blood_size,0.1);
		"####" "#" 1 A_SetScale(final_scale * 4.73 * blood_size,0.1);
		"####" "#" 1 A_SetScale(final_scale * 5.00 * blood_size,0.1);
		goto Cleanup;
	Fog:
		TNT1 A 0 A_BloodFog('BloodFog');
		Stop;
	Cleanup:
		"####" "#" 1 A_FadeOut(0.002,FTF_REMOVE|FTF_CLAMP);
		Loop;
	}
}